// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TesTool.Infra.Templates.Common.Utils
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\paulo_tjj0fgx\Desktop\Projetos\testool\src\TesTool.Infra\Templates\Common\Utils\HttpRequestTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class HttpRequestTemplate : HttpRequestTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System." +
                    "Net;\r\nusing System.Net.Http;\r\nusing System.Text;\r\nusing System.Text.Json;\r\nusing" +
                    " System.Threading.Tasks;\r\nusing System.Web;\r\n\r\nnamespace ");
            
            #line 13 "C:\Users\paulo_tjj0fgx\Desktop\Projetos\testool\src\TesTool.Infra\Templates\Common\Utils\HttpRequestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class Request\r\n    {\r\n        public readonly HttpClient Client;\r" +
                    "\n\r\n        public Request(HttpClient client) => Client = client;\r\n\r\n        publ" +
                    "ic async Task<HttpResponseMessage> GetAsync(Uri uri, dynamic query = null)\r\n    " +
                    "    {\r\n            var request = new HttpRequestMessage\r\n            {\r\n        " +
                    "        RequestUri = new Uri($\"{uri}?{GetUrlString(query)}\"),\r\n                M" +
                    "ethod = HttpMethod.Get\r\n            };\r\n\r\n            return await Client.SendAs" +
                    "ync(request);\r\n        }\r\n\r\n        public async Task<(HttpResponseMessage respo" +
                    "nse, TResult result)> GetAsync<TResult>(Uri uri, dynamic query = null)\r\n        " +
                    "{\r\n            var request = new HttpRequestMessage\r\n            {\r\n            " +
                    "    RequestUri = new Uri($\"{uri}?{GetUrlString(query)}\"),\r\n                Metho" +
                    "d = HttpMethod.Get\r\n            };\r\n\r\n            var response = await Client.Se" +
                    "ndAsync(request);\r\n            return await GetResultAsync<TResult>(response);\r\n" +
                    "        }\r\n\r\n        public async Task<HttpResponseMessage> PostAsync(Uri uri, d" +
                    "ynamic data, dynamic query = null)\r\n        {\r\n            var content = new Str" +
                    "ingContent(JsonSerializer.Serialize(data), Encoding.Default, \"application/json\")" +
                    ";\r\n            return await Client.PostAsync(new Uri($\"{uri}?{GetUrlString(query" +
                    ")}\"), content);\r\n        }\r\n\r\n        public async Task<(HttpResponseMessage res" +
                    "ponse, TResult result)> PostAsync<TResult>(Uri uri, dynamic data, dynamic query " +
                    "= null)\r\n        {\r\n            var content = new StringContent(JsonSerializer.S" +
                    "erialize(data), Encoding.Default, \"application/json\");\r\n\r\n            var respon" +
                    "se = await Client.PostAsync(new Uri($\"{uri}?{GetUrlString(query)}\"), content);\r\n" +
                    "            return await GetResultAsync<TResult>(response);\r\n        }\r\n\r\n      " +
                    "  public async Task<HttpResponseMessage> PutAsync(Uri uri, dynamic data, dynamic" +
                    " query = null)\r\n        {\r\n            var content = new StringContent(JsonSeria" +
                    "lizer.Serialize(data), Encoding.Default, \"application/json\");\r\n            retur" +
                    "n await Client.PutAsync(new Uri($\"{uri}?{GetUrlString(query)}\"), content);\r\n    " +
                    "    }\r\n\r\n        public async Task<(HttpResponseMessage response, TResult result" +
                    ")> PutAsync<TResult>(Uri uri, dynamic data, dynamic query = null)\r\n        {\r\n  " +
                    "          var content = new StringContent(JsonSerializer.Serialize(data), Encodi" +
                    "ng.Default, \"application/json\");\r\n\r\n            var response = await Client.PutA" +
                    "sync(new Uri($\"{uri}?{GetUrlString(query)}\"), content);\r\n            return awai" +
                    "t GetResultAsync<TResult>(response);\r\n        }\r\n\r\n        public async Task<Htt" +
                    "pResponseMessage> PatchAsync(Uri uri, dynamic data = null, dynamic query = null)" +
                    "\r\n        {\r\n            var content = new StringContent(JsonSerializer.Serializ" +
                    "e(data), Encoding.Default, \"application/json\");\r\n\r\n            return await Clie" +
                    "nt.PatchAsync(new Uri($\"{uri}?{GetUrlString(query)}\"), content);\r\n        }\r\n\r\n " +
                    "       public async Task<(HttpResponseMessage response, TResult result)> PatchAs" +
                    "ync<TResult>(Uri uri, dynamic data = null, dynamic query = null)\r\n        {\r\n   " +
                    "         var content = new StringContent(JsonSerializer.Serialize(data), Encodin" +
                    "g.Default, \"application/json\");\r\n\r\n            var response = await Client.Patch" +
                    "Async(new Uri($\"{uri}?{GetUrlString(query)}\"), content);\r\n            return awa" +
                    "it GetResultAsync<TResult>(response);\r\n        }\r\n\r\n        public async Task<Ht" +
                    "tpResponseMessage> DeleteAsync(Uri uri, dynamic query = null)\r\n        {\r\n      " +
                    "      return await Client.DeleteAsync(new Uri($\"{uri}?{GetUrlString(query)}\"));\r" +
                    "\n        }\r\n\r\n        public async Task<(HttpResponseMessage response, TResult r" +
                    "esult)> DeleteAsync<TResult>(Uri uri, dynamic query = null)\r\n        {\r\n        " +
                    "    var response = await Client.DeleteAsync(new Uri($\"{uri}?{GetUrlString(query)" +
                    "}\"));\r\n            return await GetResultAsync<TResult>(response);\r\n        }\r\n\r" +
                    "\n        public async Task<(HttpResponseMessage response, FileInfo file)> Downlo" +
                    "adFile(Uri uri, dynamic query = null)\r\n        {\r\n            var request = new " +
                    "HttpRequestMessage\r\n            {\r\n                RequestUri = new Uri($\"{uri}?" +
                    "{GetUrlString(query)}\"),\r\n                Method = HttpMethod.Get\r\n            }" +
                    ";\r\n\r\n            var response = await Client.SendAsync(request);\r\n            tr" +
                    "y\r\n            {\r\n                if (response.StatusCode != HttpStatusCode.OK) " +
                    "return (response, null);\r\n                var fileName = $\"{Guid.NewGuid()}{Path" +
                    ".GetExtension(response.Content.Headers.ContentDisposition?.FileNameStar)}\";\r\n   " +
                    "             var filePath = Path.Combine(Path.GetTempPath(), fileName);\r\n       " +
                    "         using var contentStream = await response.Content.ReadAsStreamAsync();\r\n" +
                    "                using var fileStream = new FileStream(filePath, FileMode.Create)" +
                    ";\r\n                await contentStream.CopyToAsync(fileStream);\r\n\r\n             " +
                    "   return (response, new FileInfo(filePath));\r\n            }\r\n            catch " +
                    "(Exception e)\r\n            {\r\n                throw new Exception($\"Could not do" +
                    "wnload file\", e);\r\n            }\r\n        }\r\n\r\n        #region Private Methods\r\n" +
                    "\r\n        private async Task<(HttpResponseMessage response, TResult result)> Get" +
                    "ResultAsync<TResult>(HttpResponseMessage response)\r\n        {\r\n            var j" +
                    "son = await response.Content.ReadAsStringAsync();\r\n            try\r\n            " +
                    "{\r\n                var result = JsonSerializer.Deserialize<TResult>(json);\r\n    " +
                    "            return (response, result);\r\n            }\r\n            catch (Except" +
                    "ion e)\r\n            {\r\n                throw new Exception($\"Could not deseriali" +
                    "ze object. Current JSON: {json}\", e);\r\n            }\r\n        }\r\n\r\n        priva" +
                    "te string GetUrlString(object data = null)\r\n        {\r\n            if (data == n" +
                    "ull) return string.Empty;\r\n\r\n            var parameters = new List<string>();\r\n " +
                    "           var properties = data.GetType().GetProperties();\r\n            foreach" +
                    " (var property in properties)\r\n            {\r\n                var value = proper" +
                    "ty.GetValue(data);\r\n                if (value == null) continue;\r\n\r\n            " +
                    "    var type = Nullable.GetUnderlyingType(property.PropertyType) ?? property.Pro" +
                    "pertyType;\r\n                var valueJson = JsonSerializer.Serialize(value);\r\n  " +
                    "              parameters.Add($\"{HttpUtility.UrlEncode(property.Name)}={HttpUtili" +
                    "ty.UrlEncode(valueJson)}\");\r\n\r\n                throw new InvalidOperationExcepti" +
                    "on($\"Not configured conversion from type {property.PropertyType.Name}\");\r\n      " +
                    "      }\r\n\r\n            return string.Join(\"&\", parameters);\r\n        }\r\n\r\n      " +
                    "  #endregion\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 164 "C:\Users\paulo_tjj0fgx\Desktop\Projetos\testool\src\TesTool.Infra\Templates\Common\Utils\HttpRequestTemplate.tt"

    public string Namespace { get; set; }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class HttpRequestTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
