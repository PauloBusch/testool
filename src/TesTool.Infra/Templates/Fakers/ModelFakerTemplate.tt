<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TesTool.Core.Models.Templates.Faker" #>
<# 
  var classFakerName = $"{Name}Faker";
  var expressionInitial = Name.ToLower().ElementAt(0);
  var useProperties = Properties.Where(p => !p.Unsafe).ToList();
#>
<# 
    foreach (var @namespace in Namespaces) 
    {
#>
using <#=@namespace#>;
<# 
    } 
#>
using Bogus;

namespace <#=FakerNamespace#> 
{
    public class <#=classFakerName#> : Faker<<#=Name#>> 
    {
        public <#=classFakerName#>()
        {
<# 
    foreach (var property in Properties) 
    { 
        PushIndent("            ");

        var isFirst = useProperties.FirstOrDefault() == property;
        var isLast = useProperties.LastOrDefault() == property;
        var rowStringBuilder = new StringBuilder();
        if (!isFirst) rowStringBuilder.Append("    ");
        if (property.Unsafe) rowStringBuilder.Append("// ");
        if (!isFirst) rowStringBuilder.Append(".");
        rowStringBuilder.Append($"RuleFor({expressionInitial} => {expressionInitial}.{property.Name}, {property.Expression})");
        if (isLast) rowStringBuilder.Append(";");
#>
<#=rowStringBuilder.ToString()#>
<#
        ClearIndent();
    } 
#>
        } 
    }
}
<#+
    public string Name { get; set; }
    public string FakerNamespace { get; set; }
    public string[] Namespaces { get; set; }
    public ModelProperty[] Properties { get; set; }
#>