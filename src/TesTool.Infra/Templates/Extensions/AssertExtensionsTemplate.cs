// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TesTool.Infra.Templates.Extensions
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\paulo_tjj0fgx\Desktop\Projetos\testool\src\TesTool.Infra\Templates\Extensions\AssertExtensionsTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AssertExtensionsTemplate : AssertExtensionsTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
                    "m.Text.RegularExpressions;\r\n\r\nnamespace ");
            
            #line 8 "C:\Users\paulo_tjj0fgx\Desktop\Projetos\testool\src\TesTool.Infra\Templates\Extensions\AssertExtensionsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ExtensionNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public static class AssertExtensions\r\n    {\r\n        public static void " +
                    "AreEqualObjects(\r\n            object source, object target,\r\n            IEnumer" +
                    "able<string> ignore = null\r\n        )\r\n        {\r\n            if (source is null" +
                    ") throw new ArgumentNullException(nameof(source));\r\n            if (target is nu" +
                    "ll) throw new ArgumentNullException(nameof(target));\r\n            var sourceType" +
                    " = source.GetType();\r\n            var targetType = target.GetType();\r\n          " +
                    "  var sourcePropertyNames = sourceType.GetProperties().Select(p => p.Name).ToLis" +
                    "t();\r\n            var targetPropertyNames = targetType.GetProperties().Select(p " +
                    "=> p.Name).ToList();\r\n            var mergedProperties = sourcePropertyNames.Con" +
                    "cat(targetPropertyNames);\r\n            var comparedPropertiesCount = 0;\r\n       " +
                    "     foreach (var propertyName in sourcePropertyNames)\r\n            {\r\n         " +
                    "       if (ignore != null && ignore.Contains(propertyName)) continue;\r\n\r\n       " +
                    "         var sourceProperty = sourceType.GetProperty(propertyName);\r\n           " +
                    "     var targetProperty = targetType.GetProperty(propertyName);\r\n               " +
                    " if (sourceProperty == null || targetProperty == null) continue;\r\n\r\n            " +
                    "    var type = Nullable.GetUnderlyingType(sourceProperty.PropertyType) ?? source" +
                    "Property.PropertyType;\r\n                if (!IsSimpleType(type)) continue;\r\n\r\n  " +
                    "              if (sourceProperty.PropertyType != targetProperty.PropertyType) co" +
                    "ntinue;\r\n                var expectedValue = sourceProperty.GetValue(source, nul" +
                    "l);\r\n                var actualValue = targetProperty.GetValue(target, null);\r\n " +
                    "               if (!AreEqualProperty(type, expectedValue, actualValue))\r\n       " +
                    "             throw new Exception(\r\n                        $\"The property {prope" +
                    "rtyName} value are not equal for object type {targetType.Name}\\n\" +\r\n           " +
                    "             $\"Expected value: {(expectedValue is null ? \"null\" : $\"\\\"{expectedV" +
                    "alue}\\\"\")}\\n\" +\r\n                        $\"Actual value: \\\"{(actualValue is null" +
                    " ? \"null\" : $\"\\\"{actualValue}\\\"\")}\\\"\"\r\n                    );\r\n                c" +
                    "omparedPropertiesCount++;\r\n            }\r\n\r\n            if (comparedPropertiesCo" +
                    "unt == decimal.Zero)\r\n                throw new Exception($\"No properties were c" +
                    "ompared for object type {targetType.Name}\");\r\n        }\r\n\r\n        private stati" +
                    "c bool AreEqualProperty(Type type, object source, object target)\r\n        {\r\n   " +
                    "         if (source == null && target == null) return true;\r\n            if (sou" +
                    "rce == null || target == null) return false;\r\n\r\n            const int precision " +
                    "= 2;\r\n            var sourceValue = source;\r\n            var targetValue = targe" +
                    "t;\r\n            if (new [] { typeof(decimal), typeof(Decimal) }.Contains(type))\r" +
                    "\n            {\r\n                sourceValue = decimal.Round((decimal)sourceValue" +
                    ", precision, MidpointRounding.ToZero);\r\n                targetValue = decimal.Ro" +
                    "und((decimal)targetValue, precision, MidpointRounding.ToZero);\r\n            }\r\n\r" +
                    "\n            if (new [] { typeof(string), typeof(String) }.Contains(type))\r\n    " +
                    "        {\r\n                sourceValue = Regex.Unescape(sourceValue.ToString());" +
                    "\r\n                targetValue = Regex.Unescape(targetValue.ToString());\r\n       " +
                    "     }\r\n\r\n            if (!sourceValue.Equals(targetValue)) return false;\r\n     " +
                    "       if (!targetValue.Equals(sourceValue)) return false;\r\n            return t" +
                    "rue;\r\n        }\r\n\r\n        public static bool IsSimpleType(Type type)\r\n        {" +
                    "\r\n            var realType = Nullable.GetUnderlyingType(type) ?? type;\r\n        " +
                    "    if (realType.IsPrimitive || realType.IsEnum) return true;\r\n\r\n            var" +
                    " sampleTypes = new[] {\r\n                typeof(string),\r\n                typeof(" +
                    "decimal),\r\n                typeof(DateTime),\r\n                typeof(DateTimeOff" +
                    "set),\r\n                typeof(TimeSpan),\r\n                typeof(Guid)\r\n        " +
                    "    };\r\n            return sampleTypes.Contains(realType);\r\n        }\r\n    }\r\n}\r" +
                    "\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 94 "C:\Users\paulo_tjj0fgx\Desktop\Projetos\testool\src\TesTool.Infra\Templates\Extensions\AssertExtensionsTemplate.tt"

    public string ExtensionNamespace { get; set; }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AssertExtensionsTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
